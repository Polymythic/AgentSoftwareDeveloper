version: '3.8'

services:
  # Database service
  database:
    image: sqlite:latest
    volumes:
      - ./database:/app/database
    environment:
      - SQLITE_DB_PATH=/app/database/agents.db
    networks:
      - agent-network

  # Agent services - each agent runs as a separate container
  code-architect:
    build: .
    container_name: code-architect-agent
    environment:
      - AGENT_NAME=code-architect
      - AGENT_ROLE=architect
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_APP_TOKEN=${SLACK_APP_TOKEN}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=INFO
    volumes:
      - ./database:/app/database
      - ./logs:/app/logs
      - ./config:/app/config
    networks:
      - agent-network
    depends_on:
      - database
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend-developer:
    build: .
    container_name: frontend-developer-agent
    environment:
      - AGENT_NAME=frontend-developer
      - AGENT_ROLE=frontend
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_APP_TOKEN=${SLACK_APP_TOKEN}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=INFO
    volumes:
      - ./database:/app/database
      - ./logs:/app/logs
      - ./config:/app/config
    networks:
      - agent-network
    depends_on:
      - database
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend-developer:
    build: .
    container_name: backend-developer-agent
    environment:
      - AGENT_NAME=backend-developer
      - AGENT_ROLE=backend
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_APP_TOKEN=${SLACK_APP_TOKEN}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=INFO
    volumes:
      - ./database:/app/database
      - ./logs:/app/logs
      - ./config:/app/config
    networks:
      - agent-network
    depends_on:
      - database
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  qa-engineer:
    build: .
    container_name: qa-engineer-agent
    environment:
      - AGENT_NAME=qa-engineer
      - AGENT_ROLE=qa
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_APP_TOKEN=${SLACK_APP_TOKEN}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=INFO
    volumes:
      - ./database:/app/database
      - ./logs:/app/logs
      - ./config:/app/config
    networks:
      - agent-network
    depends_on:
      - database
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring service
  monitoring:
    image: prom/prometheus:latest
    container_name: agent-monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - agent-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: agent-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - agent-network
    restart: unless-stopped
    depends_on:
      - monitoring

networks:
  agent-network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data: 